@* TEMPLATE *@
@page "/_Admin"
@using LinkRouter.App.Configuration
@using LinkRouter.App.Models
@using LinkRouter.App.Services

@inject NavigationManager NavigationManager;
@inject IJSRuntime Js
@inject AdminService AdminService
@inject Config Config

<title>LinkTree Admin Page</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css" rel="stylesheet"
      integrity="sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ndDqU0Gzau9qJ1lfW4pNLlhNTkCfHzAVBReH9diLvGRem5+R9g2FzA8ZGN954O5Q"
        crossorigin="anonymous"></script>
<script src="https://unpkg.com/lucide@latest"></script>
<script>
    lucide.createIcons();
</script>

<main class="bg-dark text-white">
    <div class="py-5 container bg-dark" data-bs-theme="dark">
        <h1 class="text-center mb-5">Admin Page</h1>

        <!-- Add Link Section -->
        <div class="card mb-5 p-4">
            <h2 class="mb-4 text-white">Add Link</h2>
            <div class="mb-3">
                <label for="titleInput" class="form-label">Title</label>
                <input type="text" class="form-control" id="titleInput" placeholder="Exaple Link" @bind="Title">
            </div>
            <div class="mb-3">
                <label for="iconInput" class="form-label">Icon</label>
                <input type="text" class="form-control" id="iconInput" placeholder="https://example.com/icon.png"
                       @bind="Icon">
            </div>
            <div class="mb-3">
                <label for="descriptionInput" class="form-label">Description</label>
                <input type="text" class="form-control" id="descriptionInput" placeholder="This is an example link"
                       @bind="Description">
            </div>
            <div class="mb-3">
                <label for="backgroundHoverInput" class="form-label">Background Hover Color</label>
                <input type="text" class="form-control" id="backgroundHoverInput" placeholder="#f0f0f0"
                       @bind="BackgroundHoverColor"/>
            </div>
            <div class="mb-3">
                <label for="routeInput" class="form-label">Route</label>
                <input type="text" class="form-control" id="routeInput" placeholder="/example-link" @bind="Route">
            </div>
            <div class="mb-3">
                <label for="redirectUrlInput" class="form-label">Redirect URL</label>
                <input type="text" class="form-control" id="redirectUrlInput" placeholder="https://example.com"
                       @bind="RedirectUrl"/>
            </div>
            <button @onclick="AddLink" class="btn btn-success mt-3">Add Link</button>
        </div>

        <!-- Remove Link Section -->
        <div class="card p-4">
            <h2 class="mb-4 text-white">Remove Link</h2>
            <div class="table-responsive">
                <table class="table table-striped table-hover rounded-3 overflow-hidden">
                    <thead class="text-dark">
                    <tr>
                        <th>Title</th>
                        <th>Icon</th>
                        <th>Description</th>
                        <th>Background Hover</th>
                        <th>Route</th>
                        <th>Redirect URL</th>
                        <th>Action</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var redirectRoute in RedirectRoutes)
                    {
                        <tr id="@redirectRoute.Route">
                            <td>@redirectRoute.Title</td>
                            <td>@redirectRoute.Icon</td>
                            <td>@redirectRoute.Description</td>
                            <td>@redirectRoute.BackgroundHoverColor</td>
                            <td>@redirectRoute.Route</td>
                            <td>@redirectRoute.RedirectUrl</td>
                            <td>
                                <svg @onclick="args => RemoveLink(redirectRoute.Route)"
                                     xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                     stroke-linejoin="round" class="lucide lucide-trash2-icon lucide-trash-2">
                                    <path d="M10 11v6"/>
                                    <path d="M14 11v6"/>
                                    <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"/>
                                    <path d="M3 6h18"/>
                                    <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
                                </svg>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
                @if (RedirectRoutes.Length == 0)
                {
                    <div class="text-center">
                        There are no Links
                    </div>
                }
            </div>
        </div>
    </div>
</main>

@code {
    [Parameter] public RedirectRoute[] RedirectRoutes { get; set; } = [];

    private string Title { get; set; }
    private string Icon { get; set; }
    private string Description { get; set; }
    private string BackgroundHoverColor { get; set; }
    private string Route { get; set; }
    private string RedirectUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var prePasswordCookie = await Js.InvokeAsync<string>("eval", "document.cookie");
        if (prePasswordCookie.Length <= 1 || !prePasswordCookie.Contains("password"))
        {
            NavigationManager.NavigateTo("/_AdminLogin");
            return;
        }

        var passwordCookie = prePasswordCookie.Split("password=")[1];
        var requestLogin = await AdminService.IsValidAdminPassword(passwordCookie);

        if (!requestLogin)
        {
            NavigationManager.NavigateTo("/_AdminLogin");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        RedirectRoutes = Config.Routes;
    }

    private async Task RemoveLink(string route)
    {
        var removeLink = await AdminService.RemoveLink(route);
        if (removeLink)
        {
            await Js.InvokeVoidAsync("alert", "Link removed successfully");
        }
        else
        {
            await Js.InvokeVoidAsync("alert", "An error occurred while handling the request.");
        }
    }

    private async Task AddLink()
    {
        try
        {
            if (string.IsNullOrEmpty(Title) ||
                string.IsNullOrEmpty(Icon) ||
                string.IsNullOrEmpty(Description) ||
                string.IsNullOrEmpty(BackgroundHoverColor) ||
                string.IsNullOrEmpty(Route) ||
                string.IsNullOrEmpty(RedirectUrl))
            {
                await Js.InvokeVoidAsync("alert", "Please fill in all fields.");
                return;
            }

            var addLink = await AdminService.AddNewLink(
                new RedirectRoute
                {
                    Route = Route,
                    BackgroundHoverColor = BackgroundHoverColor,
                    Description = Description,
                    Icon = Icon,
                    RedirectUrl = RedirectUrl,
                    Title = Title
                }
            );

            if (addLink)
            {
                await Js.InvokeVoidAsync("alert", "Link added successfully!");
            }
            else
            {
                await Js.InvokeVoidAsync("alert", "Failed to add link. Please try again.");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error in AddLink: {e.Message}");
            await Js.InvokeVoidAsync("alert", "An error occurred while trying to add the link. Please try again later.");
        }
    }

}
